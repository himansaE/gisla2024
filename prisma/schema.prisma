// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// user data

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String
  lastName      String?
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  providers     String[]  @default(["google"])
  session       Session[]
  Account       Account[]
  otp           otp[]
  Key           Key?
  Post          Post[]
  Draft         Draft[]
  Marks         Marks[]
  Judging       Judging[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Key {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  hashed_password String
  userId          String @unique @db.ObjectId
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @map("_id") @db.ObjectId
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model otp {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id        String   @db.ObjectId
  otp            String
  type           String
  for            String
  expire         DateTime
  update_token   String?
  use_count      Int      @default(0)
  validate_count Int      @default(0)
  user           User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model Post {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id       String   @db.ObjectId
  image_link    String
  prompt        String
  title         String
  des           String
  created_using String
  created_on    DateTime @default(now())
  state         String   @default("1")
  fb_link       String?
  voted         Boolean  @default(false)
  user          User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  Marks         Marks?
  Judging       Judging?
}

model Draft {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  url     String
  user_id String @unique @db.ObjectId
  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model Marks {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  judge_id      String   @db.ObjectId
  post_id       String   @unique @db.ObjectId
  time          DateTime @default(now())
  relevance     Int
  creativity    Int
  artistic      Int
  clarity       Int
  impact        Int
  technical     Int
  diversity     Int
  accessibility Int
  content       Int
  completeness  Int

  sum Int

  user User @relation(references: [id], fields: [judge_id])
  post Post @relation(references: [id], fields: [post_id])
}

model Judging {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  post_id  String   @unique @db.ObjectId
  judge_id String   @unique @db.ObjectId
  timeout  DateTime
  token    String
  post     Post     @relation(references: [id], fields: [post_id])
  user     User     @relation(references: [id], fields: [judge_id])
}
